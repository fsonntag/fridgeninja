package ninja.fridge.fridgeninja;

import android.app.Activity;
import android.content.Context;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.RemoteException;
import android.support.v7.app.ActionBarActivity;
import android.support.v7.app.ActionBar;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.support.v4.widget.DrawerLayout;
import android.view.Window;
import android.widget.TextView;

import com.android.volley.Cache;
import com.android.volley.Network;
import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.BasicNetwork;
import com.android.volley.toolbox.DiskBasedCache;
import com.android.volley.toolbox.HurlStack;
import com.android.volley.toolbox.JsonArrayRequest;
import com.android.volley.toolbox.JsonObjectRequest;

import org.altbeacon.beacon.Beacon;
import org.altbeacon.beacon.BeaconConsumer;
import org.altbeacon.beacon.BeaconManager;
import org.altbeacon.beacon.BeaconParser;
import org.altbeacon.beacon.RangeNotifier;
import org.altbeacon.beacon.Region;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.impl.client.DefaultHttpClient;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;


public class MainActivity extends ActionBarActivity
        implements NavigationDrawerFragment.NavigationDrawerCallbacks,
        BeaconConsumer, DiagnosisFragment.FridgeCallback, SensorEventListener {

    private BeaconManager beaconManager;

    private BeaconBuffer buffer = new BeaconBuffer();

    private HashMap<String, String> usersByDevice = new HashMap<>();

    private RequestQueue queue;

    private FragmentInteractionListener diagnoseFragment;

    @Override
    public void opened() {

    }

    @Override
    public void closed() {
        buffer.stopMonitoring();
        List<BeaconBuffer.BeaconInfo> beaconInfos = buffer.orderedResults();
        for (MatchedBeaconUpdateCallback callback : matchedUpdateCallbacks) {
            callback.beaconsChanged(beaconInfos);
        }
    }

    @Override
    public void startOpening() {
        buffer.reset();
        buffer.startMonitoring();
    }

    @Override
    public void startClosing() {

    }

    public MainActivity() {
    }

    private ArrayList<WebviewCallback> webviewCallbacks = new ArrayList<>();
    private ArrayList<BeaconsUpdateCallback> updateCallbacks = new ArrayList<>();
    private ArrayList<MatchedBeaconUpdateCallback> matchedUpdateCallbacks = new ArrayList<>();


    public void bindWebviewCallback(WebviewCallback callback) {
        webviewCallbacks.add(callback);
    }

    public void unbindBeaconsUpdateCallback(WebviewCallback callback) {
        webviewCallbacks.remove(callback);
    }

    public void bindMatchedUpdateCallback(MatchedBeaconUpdateCallback callback) {
        matchedUpdateCallbacks.add(callback);
    }

    public void bindBeaconsUpdateCallback(BeaconsUpdateCallback callback) {
        updateCallbacks.add(callback);
    }

    public void unbindBeaconsUpdateCallback(BeaconsUpdateCallback callback) {
        updateCallbacks.remove(callback);
    }

    public void unbindBeaconsUpdateCallback(MatchedBeaconUpdateCallback callback) {
        matchedUpdateCallbacks.remove(callback);
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        beaconManager.unbind(this);
    }

    protected void updateBeacons(Collection<Beacon> beacons) {
        for (BeaconsUpdateCallback callback : updateCallbacks) {
//            Log.i("MainActivity", "sending " + beacons.size() + " beacons to fragment");
            callback.beaconsChanged(beacons);
        }
    }


    @Override
    public void onBeaconServiceConnect() {
        beaconManager.setRangeNotifier(new RangeNotifier() {
            @Override
            public void didRangeBeaconsInRegion(Collection<Beacon> beacons, Region region) {
                updateBeacons(beacons);
            }
        });

        try {
            beaconManager.startRangingBeaconsInRegion(new Region("myRangingUniqueId", null, null, null));
        } catch (RemoteException e) {
            Log.e("Beacons", "Ranging exception: " + e.getMessage(), e);
        }
    }

    // autogenerated navigation stuff code below

    /**
     * Fragment managing the behaviors, interactions and presentation of the navigation drawer.
     */
    private NavigationDrawerFragment mNavigationDrawerFragment;

    /**
     * Used to store the last screen title. For use in {@link #restoreActionBar()}.
     */
    private CharSequence mTitle;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        getWindow().requestFeature(Window.FEATURE_PROGRESS);
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);


        sensorMan = (SensorManager) this.getSystemService(Context.SENSOR_SERVICE);
        gyro = sensorMan.getDefaultSensor(Sensor.TYPE_GYROSCOPE);

        // Instantiate the cache
        Cache cache = new DiskBasedCache(getCacheDir(), 1024 * 1024); // 1MB cap

        // Set up the network to use HttpURLConnection as the HTTP client.
        Network network = new BasicNetwork(new HurlStack());

        // Instantiate the RequestQueue with the cache and network.
        queue = new RequestQueue(cache, network);

        // Start the queue
        queue.start();
        JsonObjectRequest jsObjRequest = new JsonObjectRequest
                (Request.Method.GET, "http://philippd.me/users/", new Response.Listener<JSONObject>() {
                    @Override
                    public void onResponse(JSONObject response) {
                        try {
                            JSONArray users = (JSONArray) response.get("users");
                            for (int i = 0; i < users.length(); i++) {
                                JSONObject user = users.getJSONObject(i);
                                String name = user.getString("username");
                                String device = user.getString("device");
                                usersByDevice.put(device, name);
                            }
                        } catch (JSONException e) {
                            Log.e("JSON Parse", e.getMessage(), e);
                        }
                    }
                }, new Response.ErrorListener() {

                    @Override
                    public void onErrorResponse(VolleyError error) {
                        Log.e("JSON", error.getMessage(), error);
                    }
                });

        queue.add(jsObjRequest);

        mNavigationDrawerFragment = (NavigationDrawerFragment)
                getSupportFragmentManager().findFragmentById(R.id.navigation_drawer);
        mTitle = getTitle();

        // Set up the drawer.
        mNavigationDrawerFragment.setUp(
                R.id.navigation_drawer,
                (DrawerLayout) findViewById(R.id.drawer_layout));

        // setup beacon stuff
        beaconManager = BeaconManager.getInstanceForApplication(this);
        // To detect proprietary beacons, you must add a line like below corresponding to your beacon
        // type.  Do a web search for "setBeaconLayout" to get the proper expression.
        // beaconManager.getBeaconParsers().add(new BeaconParser().
        //        setBeaconLayout("m:2-3=beac,i:4-19,i:20-21,i:22-23,p:24-24,d:25-25"));
        beaconManager.getBeaconParsers().add(new BeaconParser().setBeaconLayout("m:2-3=0215,i:4-19,i:20-21,i:22-23,p:24-24"));
        beaconManager.bind(this);

        updateCallbacks.add(buffer);
    }

    @Override
    public void onNavigationDrawerItemSelected(int position) {
        // update the main content by replacing fragments
        Fragment newFragment;
        if (position == 0) {
            newFragment = MountedModeFragment.newInstance();
        } else if (position == 1) {
            newFragment = AvailableBeaconsFragment.newInstance();
        } else if (position == 2) {
            DiagnosisFragment fragment = DiagnosisFragment.newInstance();
            diagnoseFragment = fragment;
            newFragment = fragment;
        } else {
            newFragment = PlaceholderFragment.newInstance(position + 1);
        }

        FragmentManager fragmentManager = getSupportFragmentManager();
        fragmentManager.beginTransaction()
                .replace(R.id.container, newFragment)
                .commit();
    }

    public void onSectionAttached(int number) {
        switch (number) {
            case 1:
                mTitle = getString(R.string.title_section1);
                break;
            case 2:
                mTitle = getString(R.string.title_section2);
                break;
            case 3:
                mTitle = getString(R.string.title_section3);
                break;
        }
    }

    public void restoreActionBar() {
        ActionBar actionBar = getSupportActionBar();
        actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_STANDARD);
        actionBar.setDisplayShowTitleEnabled(true);
        actionBar.setTitle(mTitle);
    }


    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        if (!mNavigationDrawerFragment.isDrawerOpen()) {
            // Only show items in the action bar relevant to this screen
            // if the drawer is not showing. Otherwise, let the drawer
            // decide what to show in the action bar.
            getMenuInflater().inflate(R.menu.menu_main, menu);
            restoreActionBar();
            return true;
        }
        return super.onCreateOptionsMenu(menu);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.id.action_settings) {
            return true;
        }

        return super.onOptionsItemSelected(item);
    }

    public HashMap<String, String> getUsersByDevice() {
        return usersByDevice;
    }


    private SensorManager sensorMan;
    private Sensor gyro;

    @Override
    public void onResume() {
        super.onResume();
        sensorMan.registerListener(this, gyro,
                SensorManager.SENSOR_DELAY_NORMAL);
    }

    @Override
    public void onPause() {
        super.onPause();
        sensorMan.unregisterListener(this);
    }

    @Override
    public void onSensorChanged(SensorEvent event) {
        if (event.sensor.getType() == Sensor.TYPE_GYROSCOPE) {
            float[] force = event.values.clone();
            // Shake detection
            float x = force[0];
            float y = force[1];
            float z = force[2];
//            Log.i("Sensors", String.format("x: %.2f y: %.2f z: %.2f", x, y, z));

            onGyroData(x, y, z);
        }

    }

    private LinkedList<Float> cache = new LinkedList<>();
    private int cacheSize = 8;
    private final float magicOpenConstant = 0.4f;

    private boolean closed = true;
    private boolean opening = false;
    private boolean closing = false;
    private int openDirection = 0; // 0: unknown -1: negative opens 1: positive opens

    private void onGyroData(float x, float y, float z) {
        float magnitude = (float) Math.sqrt(x * x + y * y + z * z);
        float abs = Math.abs(magnitude);
        while (cache.size() >= cacheSize) {
            cache.removeFirst();
        }
        cache.addLast(abs);

        float avg = 0;
        if (!cache.isEmpty()) {
            for (Float v : cache) {
                avg += v;
            }
            avg /= cache.size();
        }

        if (avg > magicOpenConstant) {
            // first run: determine if positive opens or closes
            if (openDirection == 0 && abs > magicOpenConstant) {
                if (magnitude < 0) {
                    openDirection = -1;
                } else {
                    openDirection = 1;
                }
            }

            // opening or closing
            if (closed) {
                opening = true;
                startOpening();
            } else {
                closing = true;
                startClosing();
            }
        } else {
            // open or closed if we did something
            if (opening) {
                closed = false;
                opening = false;
                opened();
            }
            if (closing) {
                closed = true;
                closing = false;
                closed();
            }
        }

        String text = "Last " + cache.size() + ": " + String.format("%.2f", avg) + "\n";
        for (float v : cache) {
            text += String.format("%.2f", v) + "\n";
        }

        String state;
        if (opening || closing) {
            state = opening ? "OPENING" : "CLOSING";
        } else {
            state = closed ? "CLOSED" : "OPEN";
        }

        if(diagnoseFragment != null) {
            diagnoseFragment.setStatus(state, text);
        }
    }


    @Override
    public void onAccuracyChanged(Sensor sensor, int accuracy) {
        // required method
    }


    /**
     * A placeholder fragment containing a simple view.
     */
    public static class PlaceholderFragment extends Fragment {
        /**
         * The fragment argument representing the section number for this
         * fragment.
         */
        private static final String ARG_SECTION_NUMBER = "section_number";

        /**
         * Returns a new instance of this fragment for the given section
         * number.
         */
        public static PlaceholderFragment newInstance(int sectionNumber) {
            PlaceholderFragment fragment = new PlaceholderFragment();
            Bundle args = new Bundle();
            args.putInt(ARG_SECTION_NUMBER, sectionNumber);
            fragment.setArguments(args);
            return fragment;
        }

        public PlaceholderFragment() {
        }

        @Override
        public View onCreateView(LayoutInflater inflater, ViewGroup container,
                                 Bundle savedInstanceState) {
            View rootView = inflater.inflate(R.layout.fragment_main, container, false);
            return rootView;
        }

        @Override
        public void onAttach(Activity activity) {
            super.onAttach(activity);
            ((MainActivity) activity).onSectionAttached(
                    getArguments().getInt(ARG_SECTION_NUMBER));
        }

    }


}
